" Default
set nocompatible
let mapleader = " "
let maplocalleader = ','

" Enable plugins
filetype plugin on

" Tab stuff
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab  "tab char to spaces
set autoindent
set breakindent  
" OPTIONAL: This enables automatic indentation as you type.
filetype indent on
"set smartindent

"Search & display
set wrap
set linebreak
set ignorecase
set incsearch
set hlsearch " highlight search pattern
set cursorline " highlight current line
set nohls
set number
set relativenumber
set showmatch
set smartcase
set path+=**
set wildmenu
set scrolloff=4
syntax on
set noerrorbells
"set showcmd        " Show (partial) command in status line.

" Clipboard handling
" use same clipboard as the system
if system('uname -s') == "Darwin\n"
  set clipboard=unnamed "OSX
else
  set clipboard=unnamedplus "Linux
endif

" Files and undo
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set autowrite       " Automatically save before commands like :next and :make

" Windows and buffers
set hidden " allow changing buffer wo saving
set eadirection=hor "keep size of windows after closing a horizontal one.


" Spelling
set spell 
set spelllang=en_gb,en_us " ,es_mx
"setlocal spell spelllang=en_gb
nnoremap <Leader>es :setlocal spelllang=es_mx <CR>
nnoremap <Leader>en :setlocal spelllang=en_gb <CR>

" Autocomplete
set complete=.,w,b,u,t,i,kspell

" Programming stuff
set encoding=utf-8

" Add a line at column 80 for reference
set colorcolumn=80
highligh ColorColumn ctermbg=0 guibg=lightgrey

" Default colorscheme if no plugins
colorscheme slate
set background=dark

" Fix highlight for misspelled words
highlight SpellBad term=NONE cterm=underline ctermbg=NONE ctermfg=DarkMagenta
" Use the below highlight group when displaying bad whitespace is desired.
"au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
"highlight BadWhitespace ctermbg=red guibg=red
" Flag unnecessary white spaces

" Navigation
" Move vertically between windows
nnoremap <Leader>h :wincmd h<CR>
nnoremap <Leader>j :wincmd j<CR>
nnoremap <Leader>k :wincmd k<CR>
nnoremap <Leader>l :wincmd l<CR>

" Tab and Shift Tab config
nnoremap <Leader><Tab> >>_
nnoremap <Leader><S-Tab> <<_
inoremap <Leader><S-Tab> <C-D>
vnoremap <Leader><Tab> >gv
vnoremap <Leader><S-Tab> <gv

"" use tab to move to next sentence
"nnoremap <TAB> ) 
"" use shift tab to move to the previous sentence
"nnoremap <S-TAB> ( 

vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

nnoremap <Up> :resize +6 <CR>
nnoremap <Down> :resize -6 <CR>
nnoremap <Left> :vertical resize +6 <CR>
nnoremap <Right> :vertical resize -6 <CR>
" Do not allow movement with arrows
"nnoremap <Left> :echo "ArrowKeys Disabled!"<CR>
vnoremap <Left> :<C-u>echo "ArrowKeys Disabled!"<CR>
inoremap <Left> <C-o>:echo "ArrowKeys Disabled!"<CR>
vnoremap <Right> :<C-u>echo "ArrowKeys Disabled!"<CR>
inoremap <Right> <C-o>:echo "ArrowKeys Disabled!"<CR>
vnoremap <Up> :<C-u>echo "ArrowKeys Disabled!"<CR>
inoremap <Up> <C-o>:echo "ArrowKeys Disabled!"<CR>
vnoremap <Down> :<C-u>echo "ArrowKeys Disabled!"<CR>
inoremap <Down> <C-o>:echo "ArrowKeys Disabled!"<CR>
"noremap <SPACE> <C-F> " use space to scroll down
noremap <Leader>n :bn<CR>
noremap <Leader>p :bp<CR>
noremap <Leader>b :ls<CR>
noremap <Leader>bd :bd<CR>

"In normal mode or in insert mode to insert the current datestamp: :help i_CTRL-R
nnoremap TTT "=strftime(" %c")<CR>P
inoremap TTT <C-R>=strftime(" %c")<CR>

"set mouse=a        " Enable mouse usage (all modes)

" Some useful commands
noremap <Leader>W :w !sudo tee % > /dev/null
command! MakeTags !ctags -R .
command! Wc !wc %
command! Dts :%s/\s\+$//e "delete trailing spaces
command! Filename execute ":echo expand('%:p')"
command! Config execute ":e $MYVIMRC"
command! ConfigPlug execute ":e ~/.vim/plugins.vim"
command! Reload execute ":source $MYVIMRC"

" Python
command! Py  :w  | ! clear; python3 %

" Uncomment the following to have Vim jump to the last position when
" reopening a file
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

let python_highlight_all=1
" PEP 8 indentation
au Filetype python set
    \ tabstop=4
    \ softtabstop=4
    \ shiftwidth=4
    \ expandtab
    \ autoindent
    \ fileformat=unix
    \ foldmethod=indent
    \ foldlevel=99

" Dealing with python's virtual environments
  "execfile(activate_this, dict(__file__=activate_this))
"py3 << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
"  project_base_dir = os.environ['VIRTUAL_ENV']
"  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"  exec(compile(open(activate_this, "rb").read(), activate_this, 'exec'), dict(__file__=activate_this))
"EOF


augroup filetypedetect
"  au BufNew,BufNewFile,BufRead *.tex,*.latex,*.sty set
"      \ filetype tex

  "au BufNew,BufNewFile,BufRead *.md,*.markdown set  
      "\ setfiletype markdown  

  " Settings for plain text files
  au BufRead,BufNewFile *.txt set
      \ wrapmargin=0
      \ smartindent
      \ spell spelllang=en_gb
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Standard Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" netrw: Default file browser included in vim
" open files from netrw in a previous window, unless we're opening the current dir
if argv(0) ==# '.'
    let g:netrw_browse_split = 0
else
    let g:netrw_browse_split = 4
endif
let g:netrw_banner=0
let g:netrw_winsize=25
let g:netrw_liststyle = 3
let g:netrw_bufsettings = 'noma nomod nu rnu nobl nowrap ro'
" hide dotfiles by default (gh)
let ghregex='\(^\|\s\s\)\zs\.\S\+'
let g:netrw_list_hide=ghregex

"Open netrw at vimstartup
"augroup ProjectDrawer
"    autocmd!
"    autocmd VimEnter * if argc() == 0 | Explore! | endif
"augroup END

" Split vertically, open file explorer, resize.
nnoremap <Leader>pv :wincmd v<bar> :Ex <bar> :vertical resize 30<CR>
nnoremap <Leader>dd :Lexplore %:p:h <bar> :vert resize +10 <CR>
nnoremap <Leader>da :Lexplore<bar> :vert resize +10 <CR>

" Functions
" Function to source only if file exists {
function! SourceIfExists(file)
  if filereadable(expand(a:file))
    exe 'source' a:file
  endif
endfunction
" }

" Adding plugins!
call SourceIfExists("~/.vim/plugins.vim")
